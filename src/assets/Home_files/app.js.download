/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

var THEMETAGS = THEMETAGS || {};

(function ($) {
  /*!----------------------------------------------
      # This beautiful code written with heart
      # by Mominul Islam <hello@mominul.me>
      # In Dhaka, BD at the ThemeTags workstation.
      ---------------------------------------------*/
  // USE STRICT
  "use strict";

  window.TT = {
    init: function init() {
      // Header
      this.header = $('.site-header');
      this.body = $('body');
      this.wpadminbar = $('#wpadminbar');
      this.headerFixed = {
        initialOffset: parseInt(this.header.attr('data-fixed-initial-offset')) || 100,
        enabled: $('[data-header-fixed]').length,
        value: false,
        mobileEnabled: $('[data-mobile-header-fixed]').length,
        mobileValue: false
      }; // Logos

      this.siteTitle = this.header.find('.site-title');
      this.logo = this.header.find('.main-logo');
      this.logoForOnepage = this.header.find('.for-onepage');
      this.logoForOnepageLight = this.logoForOnepage.find('.light'); // Menus

      this.megaMenu = this.header.find('#mega-menu-wrap');
      this.mobileMenu = $('[data-mobile-menu-resolution]').data('mobile-menu-resolution');
      this.resize();
    },
    resize: function resize() {
      this.isDesktop = $(window).width() >= 991;
      this.isMobile = $(window).width() <= 991;
      this.isPad = $(window).width() <= 1024;
      this.isMobileMenu = $(window).width() <= TT.mobileMenu;
    }
  };
  THEMETAGS.initialize = {
    init: function init() {
      THEMETAGS.initialize.general();
      THEMETAGS.initialize.swiperSlider();
      THEMETAGS.initialize.countUp();
      THEMETAGS.initialize.portfolio();
      THEMETAGS.initialize.sectionSwitch();
      THEMETAGS.initialize.contactFrom();
      THEMETAGS.initialize.googleMap();
      THEMETAGS.initialize.handleMobileHeader();
    },

    /*========================================================*/

    /*=           Collection of snippet and tweaks           =*/

    /*========================================================*/
    general: function general() {
      var $scene = $('.animated-element').parallax({
        scalarX: 100,
        scalarY: 100
      });
      $('.tt-content-filter li a').on('click', function () {
        var categoryValue = $(this).attr('data-filter');
        $(this).addClass('active').siblings().removeClass('active');

        if (categoryValue == "*") {
          $('.tt-support-item').fadeIn('1000');
        } else {
          $(".tt-support-item").not('.' + categoryValue).hide();
          $('.tt-support-item').filter('.' + categoryValue).fadeIn('1000');
        }
      }); //Popup Search

      $('#search-menu-wrapper').removeClass('toggled');
      $('#search-icon').on('click', function (e) {
        e.stopPropagation();
        $('#search-menu-wrapper').toggleClass('toggled');
        $("#popup-search").focus();
      });
      $('#search-menu-wrapper input').on('click', function (e) {
        e.stopPropagation();
      });
      $('#search-menu-wrapper, body').on('click', function () {
        $('#search-menu-wrapper').removeClass('toggled');
      });

      if ($('body').hasClass("admin-bar")) {
        $('body').addClass('header-position');
      }

      var $body = $('body');
      var $popup = $('.canvas-menu-wrapper');
      $("#page-open-main-menu").on('click', function (e) {
        e.preventDefault();
        var mask = '<div class="mask-overlay">';
        $(mask).hide().appendTo('body').fadeIn('fast');
        $popup.addClass('open');
        $(".tt-hamburger").addClass('active');
        $body.addClass('page-popup-open');
        $("html").addClass("no-scroll sidebar-open").height(window.innerHeight + "px");
      });
      $("#page-close-main-menu, .mask-overlay").on('click', function (e) {
        e.preventDefault();
        $('.mask-overlay').remove();
        $body.removeClass('page-popup-open');
        $popup.removeClass('open');
        $('.sub-menu, .sub-menu-wide').removeAttr('style');
        $("html").removeClass("no-scroll sidebar-open").height("auto");
        $(".tt-hamburger").removeClass('active');
        $('.sub-menu, .sub-menu-wide').removeAttr('style');
        $('.has-submenu .menu-link').removeClass('active');
      });
      var wow = new WOW({
        boxClass: 'wow',
        animateClass: 'animated',
        offset: 0,
        mobile: false,
        live: true,
        scrollContainer: null
      });
      wow.init();

      if ($("#wpadminbar").length && $(window).width() < 768) {
        $("#wpadminbar").css({
          position: "fixed",
          top: "0"
        });
      }
      /* Magnefic Popup */


      $('.play-button, .popup-play-btn').each(function () {
        $('.play-button, .popup-play-btn').magnificPopup({
          type: 'iframe'
        });
      });

      if ($('.sticky-sidebar').length) {
        $('body').addClass('sticky-sidebar_init');
        $('.sticky-sidebar').each(function () {
          $(this).theiaStickySidebar({
            additionalMarginTop: 140,
            additionalMarginBottom: 30
          });
        });
      }

      if ($('.sticky_layout .info-wrapper').length) {
        $('.sticky_layout .info-wrapper').each(function () {
          $(this).theiaStickySidebar({
            additionalMarginTop: 120,
            additionalMarginBottom: 120
          });
        });
      }

      $('.quantity .input-text').keyup(function () {
        var $button = $(this).parent().next().next(),
            $max = parseInt($(this).attr('max')),
            $val = parseInt($(this).val());

        if ($val <= $max) {
          $button.attr('data-quantity', $val);
        }
      });
      $('body').on('click', '.quantity .plus-button', function (e) {
        var $input = $(this).parent().parent().find('input.input-text'),
            $quantity = parseInt($input.attr('max')),
            $step = parseInt($input.attr('step')),
            $val = parseInt($input.val()),
            $button = $(this).parent().parent().next().next();

        if ($quantity !== '' && $quantity <= $val + $step) {
          $('.quantity .plus-button').css('pointer-events', 'none');
        }

        if ($val + $step > $quantity) return;
        $input.val($val + $step);
        $input.trigger('change');

        if ($('.btn-atc').hasClass('atc-popup')) {
          $button.attr('data-quantity', $val + $step);
        }
      });
      $('body').on('click', '.quantity .minus-button', function (e) {
        var $input = $(this).parent().parent().find('input.input-text'),
            $step = parseInt($input.attr('step')),
            $val = parseInt($input.val()) - $step,
            $button = $(this).parent().parent().next().next();
        if ($val < $step) $val = $step;
        $input.val($val);
        $('.quantity .plus-button').removeAttr('style');
        $input.trigger('change');

        if ($('.btn-atc').hasClass('atc-popup')) {
          $button.attr('data-quantity', $val);
        }
      });
      var blogContainer = $(".blog-posts-grid");
      blogContainer.masonry({
        itemSelector: '.blog-grid-item',
        percentPosition: true
      });
      $(window).resize(function () {
        blogContainer.masonry();
      });
      /* Bootstrap Accordion  */

      $('.quiety-accordion .accordion-item').each(function () {
        var $this = $(this);
        $this.on('click', function (e) {
          var has = $this.hasClass('active');
          $('.quiety-accordion .accordion-item').removeClass('active');

          if (has) {
            $this.removeClass('active');
          } else {
            $this.addClass('active');
          }
        });
      });
    },

    /*===========================================*/

    /*=           handle Mobile Header          =*/

    /*===========================================*/
    handleMobileHeader: function handleMobileHeader() {
      if (TT.header && TT.header.length) {
        if (TT.isMobileMenu) {
          TT.header.addClass('mobile-header');
          TT.body.addClass('is-mobile-menu');
          setTimeout(function () {
            $('.main-nav').addClass('unhidden');
          }, 300);
        } else {
          TT.header.removeClass('mobile-header');
          TT.body.removeClass('is-mobile-menu');
          $('.main-nav').addClass('visible');
        }
      }
    },

    /*==========================================*/

    /*=           handle Fixed Header          =*/

    /*==========================================*/
    handleFixedHeader: function handleFixedHeader() {
      TT.init();
      var fixed = TT.headerFixed;

      if ($(document).scrollTop() > fixed.initialOffset) {
        if (!TT.isMobileMenu && fixed.enabled && !fixed.value || TT.isMobileMenu && fixed.mobileEnabled && !fixed.mobileValue) {
          if (TT.isMobileMenu) {
            fixed.mobileValue = true;
          } else {
            fixed.value = true;
          }

          TT.header.addClass('header-fixed no-transition');
        }
      } else if (fixed.value || fixed.mobileValue) {
        fixed.value = false;
        fixed.mobileValue = false;
        TT.header.removeClass('header-fixed');
      } // Effect appearance


      if ($(document).scrollTop() > fixed.initialOffset + 50) {
        TT.header.removeClass('no-transition').addClass('showed');
      } else {
        TT.header.removeClass('showed').addClass('no-transition');
      }
    },

    /*==================================*/

    /*=           Progressbar          =*/

    /*==================================*/
    progressBar: function progressBar() {
      if ($('.skill-wrapper').length) {
        $('.skills').not('.active').each(function () {
          if ($(window).scrollTop() >= $(this).offset().top - $(window).height() * 1) {
            $(this).addClass('active');
            $(this).find('.skill').each(function () {
              var procent = $(this).attr('data-value');
              $(this).find('.active-line').css('width', procent + '%');
            });
          }
        });
      }
    },

    /*==================================*/

    /*=           Portfolio          =*/

    /*==================================*/
    portfolio: function portfolio() {
      if (typeof $.fn.imagesLoaded !== 'undefined' && typeof $.fn.isotope !== 'undefined') {
        $(".portfolio-items").imagesLoaded(function () {
          var container = $(".portfolio-items");
          container.isotope({
            itemSelector: '.quiety-portfolio-item',
            layoutMode: 'masonry'
          });
          $('.portfolio-filter a').on('click', function () {
            $('.portfolio-filter').find('.current').removeClass('current');
            $(this).parent().addClass('current');
            var selector = $(this).attr("data-filter");
            container.isotope({
              filter: selector
            });
            return false;
          });
        });
      }
    },

    /*====================================*/

    /*=           Swiper Slider          =*/

    /*====================================*/
    swiperSlider: function swiperSlider() {
      $('.tt-portfolio-related').each(function () {
        var swiper = new Swiper('.tt-portfolio-related', {
          slidesPerView: 3,
          spaceBetween: 30,
          loop: true,
          speed: 800,
          autoplay: {
            delay: 2000
          },
          pagination: {
            el: '.portfolio-pagination',
            clickable: true
          }
        });
      });
    },

    /*=====================================*/

    /*=           Section Switch          =*/

    /*=====================================*/
    sectionSwitch: function sectionSwitch() {
      $('.page-scroll, .site-header .menu li a').on('click', function () {
        if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
          var target = $(this.hash);

          if (target.length > 0) {
            target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
            $('html,body').animate({
              scrollTop: target.offset().top - 130
            }, 1000);
            return false;
          }
        }
      });
    },

    /*==============================*/

    /*=           Countup          =*/

    /*==============================*/
    countUp: function countUp() {
      var options = {
        useEasing: true,
        useGrouping: true,
        separator: ',',
        decimal: '.',
        prefix: '',
        suffix: ''
      };
      var counteEl = $('[data-counter]');

      if (counteEl) {
        counteEl.each(function () {
          var val = $(this).data('counter');
          var countup = new CountUp(this, 0, val, 0, 2.5, options);
          $(this).appear(function () {
            countup.start();
          }, {
            accX: 0,
            accY: 0
          });
        });
      }
    },

    /*=================================*/

    /*=           Google Map          =*/

    /*=================================*/
    googleMap: function googleMap() {
      $('.gmap3-area').each(function () {
        var $this = $(this),
            key = $this.data('key'),
            lat = $this.data('lat'),
            lng = $this.data('lng'),
            mrkr = $this.data('mrkr'),
            zoom = $this.data('zoom'),
            scrollwheel = $this.data('scrollwheel') || false;
        $this.gmap3({
          center: [lat, lng],
          zoom: zoom,
          scrollwheel: scrollwheel,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          styles: [{
            "featureType": "water",
            "elementType": "geometry",
            "stylers": [{
              "color": "#e9e9e9"
            }, {
              "lightness": 17
            }]
          }, {
            "featureType": "landscape",
            "elementType": "geometry",
            "stylers": [{
              "color": "#f5f5f5"
            }, {
              "lightness": 20
            }]
          }, {
            "featureType": "road.highway",
            "elementType": "geometry.fill",
            "stylers": [{
              "color": "#ffffff"
            }, {
              "lightness": 17
            }]
          }, {
            "featureType": "road.highway",
            "elementType": "geometry.stroke",
            "stylers": [{
              "color": "#ffffff"
            }, {
              "lightness": 29
            }, {
              "weight": 0.2
            }]
          }, {
            "featureType": "road.arterial",
            "elementType": "geometry",
            "stylers": [{
              "color": "#ffffff"
            }, {
              "lightness": 18
            }]
          }, {
            "featureType": "road.local",
            "elementType": "geometry",
            "stylers": [{
              "color": "#ffffff"
            }, {
              "lightness": 16
            }]
          }, {
            "featureType": "poi",
            "elementType": "geometry",
            "stylers": [{
              "color": "#f5f5f5"
            }, {
              "lightness": 21
            }]
          }, {
            "featureType": "poi.park",
            "elementType": "geometry",
            "stylers": [{
              "color": "#dedede"
            }, {
              "lightness": 21
            }]
          }, {
            "elementType": "labels.text.stroke",
            "stylers": [{
              "visibility": "on"
            }, {
              "color": "#ffffff"
            }, {
              "lightness": 16
            }]
          }, {
            "elementType": "labels.text.fill",
            "stylers": [{
              "saturation": 36
            }, {
              "color": "#333333"
            }, {
              "lightness": 40
            }]
          }, {
            "elementType": "labels.icon",
            "stylers": [{
              "visibility": "off"
            }]
          }, {
            "featureType": "transit",
            "elementType": "geometry",
            "stylers": [{
              "color": "#f2f2f2"
            }, {
              "lightness": 19
            }]
          }, {
            "featureType": "administrative",
            "elementType": "geometry.fill",
            "stylers": [{
              "color": "#fefefe"
            }, {
              "lightness": 20
            }]
          }, {
            "featureType": "administrative",
            "elementType": "geometry.stroke",
            "stylers": [{
              "color": "#fefefe"
            }, {
              "lightness": 17
            }, {
              "weight": 1.2
            }]
          }]
        }).marker(function (map) {
          return {
            position: map.getCenter(),
            icon: mrkr
          };
        });
      });
    },

    /*=================================*/

    /*=           Contact Form         =*/

    /*=================================*/
    contactFrom: function contactFrom() {
      $('[data-tt-form]').each(function () {
        var $this = $(this);
        $('.form-result', $this).css('display', 'none');
        $this.submit(function () {
          $('button[type="submit"]', $this).addClass('clicked'); // Create a object and assign all fields name and value.

          var values = {};
          $('[name]', $this).each(function () {
            var $this = $(this),
                $name = $this.attr('name'),
                $value = $this.val();
            values[$name] = $value;
          }); // Make Request

          $.ajax({
            url: $this.attr('action'),
            type: 'POST',
            data: values,
            success: function success(data) {
              if (data.error == true) {
                $('.form-result', $this).addClass('alert-warning').removeClass('alert-success alert-danger').css('display', 'block');
              } else {
                $('.form-result', $this).addClass('alert-success').removeClass('alert-warning alert-danger').css('display', 'block');
              }

              $('.form-result > .content', $this).html(data.message);
              $('button[type="submit"]', $this).removeClass('clicked');
            },
            error: function error() {
              $('.form-result', $this).addClass('alert-danger').removeClass('alert-warning alert-success').css('display', 'block');
              $('.form-result > .content', $this).html('Sorry, an error occurred.');
              $('button[type="submit"]', $this).removeClass('clicked');
            }
          });
          return false;
        });
      });
    }
  };
  THEMETAGS.documentOnReady = {
    init: function init() {
      THEMETAGS.initialize.init();
    }
  };
  THEMETAGS.documentOnLoad = {
    init: function init() {
      TT.init();
      THEMETAGS.initialize.handleMobileHeader();
      $("#preloader").fadeOut("slow");
    }
  };
  THEMETAGS.documentOnResize = {
    init: function init() {
      if ($("#wpadminbar").length && $(window).width() < 768) {
        $("#wpadminbar").css({
          position: "fixed",
          top: "0"
        });
      }

      TT.resize();
      THEMETAGS.initialize.handleMobileHeader();
      THEMETAGS.initialize.handleFixedHeader();
    }
  };
  THEMETAGS.documentOnScroll = {
    init: function init() {
      THEMETAGS.initialize.handleFixedHeader(); // THEMETAGS.initialize.progressBar();
    }
  }; // Initialize Functions

  $(document).ready(THEMETAGS.documentOnReady.init);
  $(window).on('load', THEMETAGS.documentOnLoad.init);
  $(window).on('resize', THEMETAGS.documentOnResize.init);
  $(window).on('scroll', THEMETAGS.documentOnScroll.init);
})(jQuery);

/***/ }),

/***/ 0:
/*!*****************************!*\
  !*** multi ./src/js/app.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! F:\xampp\htdocs\quiety\wp-content\themes\quiety\src\js\app.js */"./src/js/app.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,